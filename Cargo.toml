[package]
name = "languagetool-code-comments"
version = "0.4.4"
edition = "2021"
rust-version = "1.69.0"

[dependencies]
anyhow = "=1.0.63"
async-std = { version = "=1.12.0", features = ["tokio1"] }
clap = "=3.2.17"
clap_complete = "=3.2.3"
dirs = "=4.0.0"
fstrings = "=0.2.3"
futures = { version = "=0.3.23", features = ["std"] }
languagetool-rust = { version = "=1.2.0", default-features = false, features = ["cli"] }
lazy_static = "=1.4.0"
owo-colors = "3.5.0"
serde = { version = "=1.0.143", features = ["derive"] }
serde_json = "=1.0.83"
tokio = { version = "=1.20.1", features = ["macros"] }
tree-sitter = "=0.20.8"
url = "=2.2.2"
xxhash-rust = { version = "=0.8.5", features = ["xxh3"] }

# Enable vendored features to simplify cross compilation.
reqwest = { version = "=0.11.11", default-features = false, features = ["native-tls-vendored", "json"] }

[dev-dependencies]
axum = "=0.5.15"
expectest = "=0.12.0"

[build-dependencies]
cc = { version = "=1.0.73", features = ["parallel"] }
vergen = { version = "=7.4.0", features = ["git"] }

[package.metadata.bin]
cargo-llvm-cov = "0.4.14"
cargo-deny = "0.13.5"
cargo-bundle-licenses = "1.0.1"
cargo-nextest = "0.9.35"
cross = "0.2.4"
dprint = "0.36.0"
rust-script = "0.21.0"

[package.metadata.commands]
build-completions = '''set -e
  rm -rf completions
  mkdir completions
  ./target/debug/languagetool-code-comments completion --shell zsh > completions/languagetool-code-comments.zsh
  ./target/debug/languagetool-code-comments completion --shell bash > completions/languagetool-code-comments.bash
  ./target/debug/languagetool-code-comments completion --shell fish > completions/languagetool-code-comments.fish
'''
lint = '''set -e
  cargo cmd setup-nightly
  cargo +ltcc-nightly fmt --check
  cargo clippy
  cargo check
  cargo bin dprint check
  cargo bin cargo-deny check licenses
'''
lint-fix = '''set -e
  cargo cmd setup-nightly
  cargo clippy --fix --allow-dirty --allow-staged
  cargo fix --allow-dirty --allow-staged
  # Run twice as for some reason not all formatting is applied on the first try.
  cargo +ltcc-nightly fmt
  cargo +ltcc-nightly fmt
  cargo bin dprint fmt
'''
goreleaser = '''set -e
  export LTCC_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')

  mkdir -p .bin
  rm -f .bin/goreleaser
  curl -L https://github.com/goreleaser/goreleaser/releases/download/v1.10.3/goreleaser_Darwin_x86_64.tar.gz | tar xz - -C .bin goreleaser

  cargo cmd build-completions
  AUR_KEY=$(cat ~/.ssh/aur) .bin/goreleaser --rm-dist
  tools/apt.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/choco.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/nur.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/yum.sh "$LTCC_VERSION" "$(realpath dist)"
'''
release = '''set -e
  cargo check
  cargo bin cargo-deny check licenses
  cargo bin cargo-bundle-licenses --format json --output THIRDPARTY.json
  rm -f THIRDPARTY.md
  cat THIRDPARTY.json | sd 'NOT FOUND' '' | jq -rc '.third_party_libraries[]' | jq -rcs '.[] | "## \(.package_name) - \(.licenses[0].license)\n\n\(.licenses[0].text)\n---\n"' > THIRDPARTY.md

  export LTCC_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')
  git add .
  git commit -m "v$LTCC_VERSION"
  git tag -a "v$LTCC_VERSION" -m "v$LTCC_VERSION"

  cargo build
  cargo bin rust-script ./tools/update-readme.rs
  cargo bin dprint fmt
  git add .
  git commit --amend -m "v$LTCC_VERSION"
  git tag -d "v$LTCC_VERSION"
  git tag -a "v$LTCC_VERSION" -m "v$LTCC_VERSION"

  cargo bin cross build --release --target x86_64-apple-darwin
  cargo bin cross build --release --target aarch64-apple-darwin
  cargo bin cross build --release --target x86_64-unknown-linux-gnu
  cargo bin cross build --release --target aarch64-unknown-linux-gnu
  cargo bin cross build --release --target x86_64-pc-windows-gnu

  git push
  git push --tags
  cargo cmd goreleaser
'''

get-nightly-name = 'echo ltcc-nightly'
setup-nightly = '''
  export LTCC_NIGHTLY=nightly-2022-08-11
  rustup toolchain install "$LTCC_NIGHTLY" --component llvm-tools-preview rustfmt --force
  rustup toolchain link $(cargo cmd get-nightly-name | tail -n1) "$(rustup toolchain list -v | grep $LTCC_NIGHTLY | grep '^nightly-' | awk '{print $2}')"
'''
test = '''
  cargo bin cargo-nextest run
'''
test-coverage = '''
  cargo cmd setup-nightly
  cargo +ltcc-nightly bin cargo-llvm-cov --ignore-filename-regex='_test.rs'
'''
test-coverage-html = '''
  cargo cmd setup-nightly
  cargo +ltcc-nightly bin cargo-llvm-cov --open --ignore-filename-regex='_test.rs'
'''
test-coverage-lcov = '''
  cargo cmd setup-nightly
  rm -f lcov.info
  cargo +ltcc-nightly bin cargo-llvm-cov --lcov --output-path lcov.info --ignore-filename-regex='_test.rs'
'''
test-coverage-ci = '''
  cargo cmd setup-nightly
  cargo +ltcc-nightly bin cargo-llvm-cov --html --output-dir ./coverage --ignore-filename-regex='_test.rs'
'''
