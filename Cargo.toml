[package]
name = "languagetool-code-comments"
version = "0.6.1"
edition = "2021"
license = "MIT"

[dependencies]
anyhow = "=1.0.63"
async-std = { version = "=1.12.0", features = ["tokio1"] }
clap = "=3.2.17"
clap_complete = "=3.2.3"
dirs = "=4.0.0"
fstrings = "=0.2.3"
futures = { version = "=0.3.23", features = ["std"] }
languagetool-rust = { version = "=1.2.0", default-features = false, features = ["cli"] }
lazy_static = "=1.4.0"
owo-colors = "3.5.0"
serde = { version = "=1.0.143", features = ["derive"] }
serde_json = "=1.0.83"
tokio = { version = "=1.20.1", features = ["macros"] }
tree-sitter = "=0.20.8"
url = "=2.2.2"
xxhash-rust = { version = "=0.8.5", features = ["xxh3"] }

# Enable vendored features to simplify cross compilation.
reqwest = { version = "=0.11.11", default-features = false, features = ["native-tls-vendored", "json"] }

[dev-dependencies]
axum = "=0.5.15"
expectest = "=0.12.0"

[build-dependencies]
cc = { version = "=1.0.73", features = ["parallel"] }
vergen = { version = "=7.4.0", features = ["git"] }

[package.metadata.bin]
cargo-about = { version = "0.5.7" }
cargo-binstall = { version = "1.4.4" }
cargo-cmd = { version = "0.3.1" }
cargo-deny = { version = "0.13.5" }
cargo-gha = { version = "0.4.6" }
cargo-llvm-cov = { version = "0.5.25" }
cargo-nextest = { version = "0.9.57", locked = true }
cargo-xwin = { version = "0.14.8" }
cargo-zigbuild = { version = "0.17.4" }
dprint = { version = "0.40.2" }
rust-script = { version = "0.21.0" }

[package.metadata.gha]
targets = ["aarch64-apple-darwin"]

[package.metadata.gha.assets]
goreleaser_goreleaser = { tag = "v1.21.2", owner_repo = "goreleaser/goreleaser", binaries = ["goreleaser"], target_archives = { aarch64-apple-darwin = "goreleaser_Darwin_arm64.tar.gz" } }

[package.metadata.commands]
build-completions = '''set -e
  rm -rf completions
  mkdir completions
  ./target/debug/languagetool-code-comments completion --shell zsh > completions/languagetool-code-comments.zsh
  ./target/debug/languagetool-code-comments completion --shell bash > completions/languagetool-code-comments.bash
  ./target/debug/languagetool-code-comments completion --shell fish > completions/languagetool-code-comments.fish
'''
lint = '''set -e
  cargo cmd setup-nightly
  cargo +ltcc-nightly fmt --check
  cargo clippy
  cargo check
  cargo bin dprint check
  cargo bin cargo-deny check licenses
'''
lint-fix = '''set -e
  cargo cmd setup-nightly
  cargo clippy --fix --allow-dirty --allow-staged
  cargo fix --allow-dirty --allow-staged
  # Run twice as for some reason not all formatting is applied on the first try.
  cargo +ltcc-nightly fmt
  cargo +ltcc-nightly fmt
  cargo bin dprint fmt
'''
goreleaser = '''set -e
  export LTCC_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')

  cargo cmd build-completions
  AUR_KEY=$(cat ~/.ssh/aur) cargo gha goreleaser --rm-dist
  tools/apt.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/choco.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/nur.sh "$LTCC_VERSION" "$(realpath dist)"
  tools/yum.sh "$LTCC_VERSION" "$(realpath dist)"
'''
release = '''set -e
  docker ps >/dev/null || (echo "Docker is not running" && exit 1)
  cargo check
  cargo bin cargo-deny check licenses
  ./tools/thirdparty/run.sh

  export LTCC_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')
  git add .
  git commit -m "v$LTCC_VERSION"
  git tag -a "v$LTCC_VERSION" -m "v$LTCC_VERSION"

  cargo build
  cargo bin rust-script ./tools/update-readme.rs
  cargo bin dprint fmt
  git add .
  git commit --amend -m "v$LTCC_VERSION"
  git tag -d "v$LTCC_VERSION"
  git tag -a "v$LTCC_VERSION" -m "v$LTCC_VERSION"

  cargo zigbuild --release --target x86_64-apple-darwin
  cargo zigbuild --release --target aarch64-apple-darwin
  cargo zigbuild --release --target x86_64-unknown-linux-gnu
  cargo zigbuild --release --target aarch64-unknown-linux-gnu
  cargo xwin build --release --target x86_64-pc-windows-msvc --xwin-arch x86_64

  git push
  git push --tags
  cargo cmd goreleaser
'''

get-nightly-name = 'echo ltcc-nightly'
setup-nightly = '''
  export LTCC_NIGHTLY=nightly-2022-08-11
  rustup toolchain install "$LTCC_NIGHTLY" --component llvm-tools-preview rustfmt --force
  rustup toolchain link $(cargo cmd get-nightly-name | tail -n1) "$(rustup toolchain list -v | grep $LTCC_NIGHTLY | grep '^nightly-' | awk '{print $2}')"
'''
test = 'cargo nextest run'
test-coverage = '''
  cargo llvm-cov nextest --ignore-filename-regex='_test.rs'
'''
test-coverage-html = '''
  cargo llvm-cov nextest --open --ignore-filename-regex='_test.rs'
'''
test-coverage-lcov = '''
  rm -f lcov.info
  cargo llvm-cov nextest --lcov --output-path lcov.info --ignore-filename-regex='_test.rs'
'''
test-coverage-ci = '''
  cargo llvm-cov nextest --html --output-dir ./coverage --ignore-filename-regex='_test.rs'
'''
